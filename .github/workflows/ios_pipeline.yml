# This is a basic workflow to help you get started with Actions

name: iOS Build & Code Signing

# Controls when the workflow will run

on:
  workflow_call:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-12

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Flutter action
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: "3.7.3"
          channel: "stable"
          cache: true
      - name: Fetching Flutter dependencies
        run: flutter pub get
      - name: Set pathes for Apple Signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_DEV_B64 }}
        run: |
          # create variables
          echo "CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12" >> $GITHUB_ENV
          echo "PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision" >> $GITHUB_ENV
          echo "KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db" >> $GITHUB_ENV
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $RUNNER_TEMP/build_certificate.p12
      - name: Import certificate and provisioning profile from secrets
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DEV_PROVISION_B64 }}
        run: |
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output ${{env.PP_PATH}}
          echo "APPSTORE_GROUP=DEV" >> $GITHUB_ENV
          echo "PLIST_FILE=adhoc-release.plist" >> $GITHUB_ENV     
          echo "FLUTTER_FLAVOR=staging" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/production-') != true
      - name: Import certificate and provisioning profile from secrets
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_PROVISION_B64 }}
        run: |
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output ${{env.PP_PATH}}
          echo "APPSTORE_GROUP=PRODUCTION" >> $GITHUB_ENV
          echo "PLIST_FILE=appstore-release.plist" >> $GITHUB_ENV
          echo "FLUTTER_FLAVOR=production" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/production-')
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.DISTRO_PW }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" ${{env.KEYCHAIN_PATH}}
          security set-keychain-settings -lut 21600 ${{env.KEYCHAIN_PATH}}
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" ${{env.KEYCHAIN_PATH}}
          # import certificate to keychain
          security import ${{env.CERTIFICATE_PATH}} -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k ${{env.KEYCHAIN_PATH}}
          security list-keychain -d user -s ${{env.KEYCHAIN_PATH}}
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ${{env.PP_PATH}} ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Installing pods for iOS
        working-directory: ./ios
        run: pod install
      - name: Building IPA
        run: flutter build ipa --flavor ${{env.FLUTTER_FLAVOR}} --target lib/main_${{env.FLUTTER_FLAVOR}}.dart --release --export-options-plist ios/${{env.PLIST_FILE}}
      - name: Transmit to AppCenter
        env:
          APP_CENTER_TOKEN: ${{ secrets.APP_CENTER_IOS }}
        run: |
          echo 'Installing App Center CLI tools'
          npm install -g appcenter-cli
          echo "Find build artifacts"
          ipaPath=$(find . -name "*.ipa" | head -1)
          echo "Found ipa at $ipaPath"
          if [[ -z ${ipaPath} ]]
          then
            echo "No ipas were found, skip publishing to App Center"
          else
            echo "Publishing $ipaPath to App Center"
            appcenter distribute release \
            --group ${{env.APPSTORE_GROUP}} \
            --file "${ipaPath}" \
            --release-notes '${{ github.event.head_commit.message }}' \
            --app Die-Gruenen/Gruene-App \
            --token "${APP_CENTER_TOKEN}"
          fi
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
