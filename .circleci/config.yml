### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `./scripts/circleci-update-config` from the project root.
commands:
    check_circleci_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: ./tools/circleci-update-config
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running the `./scripts/circleci-update-config` script."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    install_dart_linux:
        steps:
            - run:
                command: |-
                    curl -o dart.deb https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.3/linux_packages/dart_3.5.3-1_amd64.deb
                    sudo dpkg -i dart.deb
                name: Install Dart
    install_fvm:
        steps:
            - run:
                command: |
                    dart pub global activate fvm
                    echo 'export PATH=$HOME/.pub-cache/bin:$PATH' >> $BASH_ENV
                    export PATH="$PATH":"$HOME/.pub-cache/bin"
                name: Install FVM
            - restore_cache:
                keys:
                    - v1-fvm-{{ checksum ".fvmrc" }}-{{ arch }}
            - run:
                command: fvm install
                name: Install Flutter
            - save_cache:
                key: v1-fvm-{{ checksum ".fvmrc" }}-{{ arch }}
                paths:
                    - .fvm
                    - ~/fvm/
            - run:
                command: fvm flutter --version
                name: Show Flutter version
            - run:
                command: fvm flutter config --no-analytics
                name: Configure Flutter
    persist_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ${BASH_ENV}
                name: List environment variables
            - run:
                command: cat ${BASH_ENV} >> environment_variables
                name: Save environment variables to file
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_workspace:
        description: Attach the workspace at ~/attached_workspace and list its contents
        steps:
            - attach_workspace:
                at: ~/attached_workspace
            - run:
                command: ls -A ~/attached_workspace
                name: Attached workspace contents
            - run:
                command: ls -AR ~/attached_workspace
                name: Recursively list attached workspace contents
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ~/attached_workspace/environment_variables
                name: List environment variables
            - run:
                command: cat ~/attached_workspace/environment_variables >> ${BASH_ENV}
                name: Restore environment variables
jobs:
    check:
        docker:
            - image: cimg/node:20.13.1
        resource_class: small
        steps:
            - checkout:
                path: ~/project
            - check_circleci_config
            - install_dart_linux
            - install_fvm
            - run:
                command: fvm flutter pub get --enforce-lockfile
                name: Install Flutter Packages
            - run:
                command: fvm dart format -l 120 -o none --set-exit-if-changed .
                name: Check Formatting
            - run:
                command: fvm flutter analyze --fatal-infos --fatal-warnings
                name: Check Analyzer and Linting
parameters:
    run_commit:
        default: true
        type: boolean
version: 2.1
workflows:
    commit:
        jobs:
            - check
        when:
            and:
                - << pipeline.parameters.run_commit >>
                - not:
                    equal:
                        - main
                        - << pipeline.git.branch >>

